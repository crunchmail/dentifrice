{"version":3,"sources":["init-functions.js","initialize.js"],"names":["error","msg","output","warn","info","settings","log","debug","type","enabled","window","console","loadSettings","local_settings","default_settings","showSpinner","noinlineAttr","uploadURL","plugins","draftStore","uploadStore","beforeEditor","afterEditor","_","merge","CKEDITOR_BASEPATH","appRootUrl","_init","lang","title","dtfInit","loadEditor","_getQueryParameterByName","name","replace","regex","RegExp","results","exec","location","search","decodeURIComponent","msgPrefix","msgPrefixLen","length","getAbsoluteUrl","url","r","test","spinner","action","_overlay","$","_spinner","_spinnerLeft","innerWidth","width","css","show","hide","blocks_config","styles","loadScripts","scripts","index","callback","failCallback","getScript","fail","jqxhr","exception","scriptsList","map","item","concat","push","i18n","init","lng","fallbackLng","lowerCaseLng","resGetPath","useLocalStorage","dtfEditor","load","jQuery","pageUrl","href","substring","lastIndexOf","settingsUrl","templateUrl","stylesUrl","configUrl","response","status","xhr","templateURL","statusText","get","$tmp","html","find","attr","contents","appendTo","getJSON","data","configURL","stylesURL"],"mappings":"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","file":"init.min.js","sourcesContent":["// Copyright (c) 2015 Oasiswork.\n// All Rights Reserved.\n//\n// This Source Code Form is subject to the\n// terms of the Mozilla Public License, v. 2.0.\n// If a copy of the MPL was not distributed with this file,\n// You can obtain one at\n// http://mozilla.org/MPL/2.0/.\n\n// Copyright (c) 2015 Oasiswork.\n// All Rights Reserved.\n//\n// This Source Code Form is subject to the\n// terms of the Mozilla Public License, v. 2.0.\n// If a copy of the MPL was not distributed with this file,\n// You can obtain one at\n// http://mozilla.org/MPL/2.0/.\n\n/**\n * Post Message settings\n */\nvar\n  msgPrefix    = \"[Dentifrice]\",\n  msgPrefixLen = msgPrefix.length,\n  title,\n  lang,\n  appRootUrl;\n\n/**\n * Log error messages to console.\n * Always logged regardless of the 'log' setting.\n */\nfunction error (msg) {\n  output('error', msg, true);\n}\n\n/**\n * Log warning messages to console.\n * Always logged regardless of the 'log' setting.\n */\nfunction warn (msg) {\n  output('warn', msg, true);\n}\n\n/**\n * Log information messages to console.\n * Only displayed if 'log' setting is true.\n */\nfunction info (msg) {\n  output('info', msg, settings.log);\n}\n\n/**\n * Log debug messages to console.\n * Only displayed if 'debug' setting is true.\n */\nfunction debug (msg) {\n    output('log', msg, settings.debug);\n}\n\n/**\n * Print messages to the console using provided level.\n */\nfunction output (type, msg, enabled) {\n  if (true === enabled && 'object' === typeof window.console) {\n    console[type]('DentifriceEditor: ' + msg);\n  }\n}\n\n/**\n * Load settings\n * See _local_settings.js and README.md for how to override\n */\nvar settings = {},\n    CKEDITOR_BASEPATH;\nfunction loadSettings (local_settings) {\n  var default_settings = {\n    log          : true,\n    debug        : false,\n    showSpinner  : true,\n    noinlineAttr : 'inline=\"false\"',\n    uploadURL    : 'http://localhost:8080/files',\n    plugins      : {\n      'draftStore'   : 'drafts-localstore.js',\n      'uploadStore'  : 'upload-simplestore.js',\n      'beforeEditor' : [],\n      'afterEditor'  : []\n    }\n  };\n  // Merge local_settings and defaults\n  settings = _.merge(default_settings, local_settings);\n  // Force ckeditor BasePath\n  CKEDITOR_BASEPATH = settings.appRootUrl + '/ckeditor/';\n}\n\n/* Helper function to get a file's absolute URL\n * using discovered appRootUrl\n */\nvar getAbsoluteUrl = function (url) {\n  var r = new RegExp('^(?:[a-z]+:)?//', 'i');\n  if ( r.test(url) ) {\n   // URL is absolute, return unchanged\n   return url;\n  } else {\n   // URL is relative, concatenate with appRootUrl and return\n   return settings.appRootUrl + url.replace(/^\\//, '');\n  }\n};\n\n/* Spinner overlay\n */\nvar spinner = function (action) {\n  var _overlay = $('.overlay');\n  var _spinner = $('.spinner');\n  var _spinnerLeft = (window.innerWidth/2) - (_spinner.width()/2);\n  _spinner.css('left',_spinnerLeft);\n  if (settings.showSpinner) {\n    switch (action) {\n      case 'show':\n        debug('Showing spinner');\n        //$('body').append(_spinner);\n        _overlay.show();\n        _spinner.show();\n        break;\n      case 'hide':\n        debug('Hiding spinner');\n        //_spinner.remove();\n        _spinner.hide();\n        _overlay.hide();\n        break;\n      default:\n        warn('Unknown spinner action');\n    }\n  }\n};\n\nfunction _init (local_settings) {\n  // Add a few values to local settings before loading\n  local_settings.appRootUrl = appRootUrl;\n  local_settings.lang = lang;\n  local_settings.title = title;\n  // Get the settings\n  loadSettings(local_settings);\n  // And start initialising\n  dtfInit.loadEditor();\n}\n\nfunction _getQueryParameterByName (name) {\n  name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n  var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n      results = regex.exec(location.search);\n  return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n/* Some global variables that we will need\n * throughout the application\n */\nvar blocks_config = { styles: {} };\n\n\nvar dtfInit = (function ( $ ) {\n  'use strict';\n\n  var loadScripts = function (scripts, index, callback, failCallback) {\n    if (typeof scripts === 'string') scripts = [scripts];\n    debug('Loading script: ' + scripts[index]);\n    $.getScript(scripts[index], function () {\n      if(index + 1 <= scripts.length - 1) {\n        loadScripts(scripts, index + 1, callback, failCallback);\n      } else {\n        if(callback) callback();\n      }\n    })\n    .fail(function(jqxhr, settings, exception) {\n      warn(scripts[index] + ' loading error: ' + exception);\n      if(failCallback) failCallback();\n    });\n  };\n\n  var loadEditor = function () {\n    // Show spinner\n    spinner('show');\n    // Build list of scripts to load\n    var scriptsList = [\n      settings.appRootUrl + 'js/plugins/' + settings.plugins.draftStore,\n      settings.appRootUrl + 'js/plugins/' + settings.plugins.uploadStore\n    ];\n    // Add before-editor custom scripts\n    if (typeof settings.plugins.beforeEditor === 'string') settings.plugins.beforeEditor = [settings.plugins.beforeEditor];\n    var beforeEditor = settings.plugins.beforeEditor.map( function(item) { return getAbsoluteUrl(item); });\n    scriptsList = scriptsList.concat(beforeEditor);\n    // Add the editor itself\n    scriptsList.push(settings.appRootUrl + 'js/editor.js');\n    // Add after-editor custom scripts\n    if (typeof settings.plugins.afterEditor === 'string') settings.plugins.afterEditor = [settings.plugins.afterEditor];\n    var afterEditor = settings.plugins.afterEditor.map( function(item) { return getAbsoluteUrl(item); });\n    scriptsList = scriptsList.concat(afterEditor);\n\n    // Dynamically load scripts\n    loadScripts(scriptsList, 0, function () {\n      // Load translations\n      info('Initializing locale');\n      $.i18n.init({\n        lng             : settings.lang,\n        fallbackLng     : 'en',\n        lowerCaseLng    : true,\n        resGetPath      : settings.appRootUrl + 'locales/__lng__.json',\n        useLocalStorage : false,\n        debug           : settings.debug\n      }, function () {\n        // Load editor\n        info('Initializing editor');\n        dtfEditor.load();\n        // Hide spinner\n        spinner('hide');\n      });\n    });\n  };\n\n  return {\n    loadScripts : loadScripts,\n    loadEditor  : loadEditor\n  };\n\n})( jQuery );\n","// Copyright (c) 2015 Oasiswork.\n// All Rights Reserved.\n//\n// This Source Code Form is subject to the\n// terms of the Mozilla Public License, v. 2.0.\n// If a copy of the MPL was not distributed with this file,\n// You can obtain one at\n// http://mozilla.org/MPL/2.0/.\n\n// Copyright (c) 2015 Oasiswork.\n// All Rights Reserved.\n//\n// This Source Code Form is subject to the\n// terms of the Mozilla Public License, v. 2.0.\n// If a copy of the MPL was not distributed with this file,\n// You can obtain one at\n// http://mozilla.org/MPL/2.0/.\n\n// Let's load our settings and initialise the editor !\n(function ( $ ) {\n\n  // Get our own url base dynamically\n  // This is to allow deployments into a subdirectory\n  var pageUrl = location.href;\n  appRootUrl = pageUrl.substring(0, pageUrl.lastIndexOf('/')+1);\n  var settingsUrl = appRootUrl + '_local_settings.js';\n\n  // Get the URLs of the template, css and configuration to load\n  var templateUrl = _getQueryParameterByName('template');\n  var stylesUrl = _getQueryParameterByName('styles');\n  var configUrl = _getQueryParameterByName('config');\n  lang = _getQueryParameterByName('lang');\n  title = _getQueryParameterByName('title');\n\n  // Start by loading the template content\n  $('#dtf-content').load(templateUrl, function ( response, status, xhr ) {\n    if ( status == \"error\" ) {\n\n      error('Could not load template URL ' + templateURL + ': ' + xhr.status + ' ' + xhr.statusText);\n\n    } else {\n\n      debug('Template loaded');\n\n      // Then load the styles\n      $.get(stylesUrl, function (styles) {\n\n        // First load the styles into a dummy element so we can work easily with them\n        var $tmp = $('<tmp/>').html(styles);\n        $tmp.find('style').attr('data-userstyle', true);\n        // Then append the dummy element contents (styles) to the head\n        $tmp.contents().appendTo('head');\n\n        debug('Styles loaded');\n\n        // Then load the configuration\n        $.getJSON(configUrl, function (data) {\n\n          debug('Configuration loaded');\n\n          // Store parsed json for use by other modules\n          blocks_config = data;\n\n          // Finally load local_settings and start the editor\n          dtfInit.loadScripts(settingsUrl, 0, function () {\n            // Success callback - local_settings found\n            _init(local_settings);\n          }, function () {\n            // Fail callback - local_settings not found\n            var local_settings = {};\n            _init(local_settings);\n          });\n\n        })\n        .fail(function () {\n\n            error('Could not load configuration URL:' + configURL);\n\n        });\n\n      })\n      .fail(function () {\n\n        error('Could not load styles URL:' + stylesURL);\n\n      });\n\n    }\n  });\n\n})( jQuery );\n"],"sourceRoot":"/source/"}