{"version":3,"sources":["bootstrap.js"],"names":["iframeID","msgPrefix","msgPrefixLen","length","lang","target","dentifrice","settings","defaults","targetId","templateUrl","stylesUrl","configUrl","title","log","debug","hideTarget","anchorId","replaceAnchor","width","height","parseInt","window","outerHeight","locales","en","Please validate","fr","_initLang","userLang","navigator","language","userLanguage","logger","_debug","_","text","locale","_initSettings","options","option","hasOwnProperty","_findTarget","element","document","getElementById","_warn","_showValidationAlert","iframe","divCheck","createElement","id","textContent","parentNode","insertBefore","rect","getBoundingClientRect","iframeTop","top","scrollTop","heightElement","offsetHeight","widthElement","offsetWidth","posTop","parseFloat","posLeft","style","cssText","scrollTo","setTimeout","removeChild","init_dentifrice","_info","dentifrice_postMessage","setupMessageListener","checkIfValidated","value","getSettings","bootstrap","_initEditor","init","dentifrice_settings","_output","type","msg","enabled","console","eventMethod","addEventListener","eventer","messageEvent","messageListener","final_html","data","content","event","isMessageForUs","substr","messageJson","JSON","parse","display","assetsUrlBase","replace","absTest","templateUrlEncoded","encodeURIComponent","stylesUrlEncoded","test","configUrlEncoded","bootstrapRoot","allScripts","getElementsByTagName","re","forEach","call","tag","src","getAttribute","match","exec","editorUrl","setAttribute","border","anchor","replaceChild","appendChild","nextSibling"],"mappings":"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","file":"dentifrice.min.js","sourcesContent":["// Copyright (c) 2015 Oasiswork.\n// All Rights Reserved.\n//\n// This Source Code Form is subject to the\n// terms of the Mozilla Public License, v. 2.0.\n// If a copy of the MPL was not distributed with this file,\n// You can obtain one at\n// http://mozilla.org/MPL/2.0/.\n\n/*\n* Globals variables\n*/\nvar iframeID     = 'dentifriceIframe',\nmsgPrefix    = '[Dentifrice]',\nmsgPrefixLen = msgPrefix.length,\nlang         = 'en',\ntarget;\n\n\n/*\n* Main Dentifrice Module\n*/\nvar dentifrice = (function () {\n    'use strict';\n\n    // Define some global variables and defaults\n    var\n    settings     = {},\n\n    defaults     = {\n        targetId       : 'dentifrice-textarea',\n        templateUrl    : null,\n        stylesUrl      : 'styles.html',\n        configUrl      : 'configuration.json',\n        title          : 'Dentifrice Newsletter',\n        lang           : null,\n        log            : true,\n        debug          : false,\n        hideTarget     : true,\n        anchorId       : null,\n        replaceAnchor  : false,\n        width          : 850,\n        height         : parseInt(window.outerHeight*0.8)\n    },\n\n    locales      = {\n        'en' : {\n            'Please validate' : 'Please validate your edition first !'\n        },\n        'fr' : {\n            'Please validate' : \"Veuillez valider l'Ã©diteur !\"\n        }\n    };\n\n    /**\n    * Initialize language to, in order of preference :\n    *   - language provided in settings\n    *   - browser language\n    *   - defaults to 'en'\n    */\n    var _initLang = function () {\n        var userLang = navigator.language || navigator.userLanguage;\n        if ( settings.lang && (settings.lang in locales) ) {\n            lang = settings.lang;\n        } else if ( userLang in locales) {\n            lang = userLang;\n        }\n        logger._debug('Setting locale to: ' + lang);\n    };\n\n    /**\n    * Returns the translated string matching \"text\" parameter\n    */\n    var _ = function (text) {\n        var locale = locales[lang];\n        return ( text in locale ? locale[text] : text );\n    };\n\n    /**\n    * Initialize settings from provided dictionnary\n    */\n    var _initSettings = function (options) {\n        for (var option in defaults) {\n            if (defaults.hasOwnProperty(option)) {\n                settings[option] = options.hasOwnProperty(option) ? options[option] : defaults[option];\n            }\n        }\n    };\n\n    /**\n    * Find the element where the generated HTML is to be pushed to\n    */\n    var _findTarget = function () {\n        var element = document.getElementById(settings.targetId);\n        if ( !element || 0 === element.length) {\n            logger._warn('Could not find element with ID: ' + settings.targetId);\n            return false;\n        } else {\n            logger._debug('Found element matching selector: ' + settings.targetId);\n            return element;\n        }\n    };\n\n    //Global\n    var _showValidationAlert = function () {\n        if(document.getElementById('dentifriceValidationAlert') === null) {\n\n            var iframe = document.getElementById(iframeID);\n\n            var divCheck = document.createElement('div');\n            divCheck.id = \"dentifriceValidationAlert\";\n            divCheck.textContent = _('Please validate');\n\n            iframe.parentNode.insertBefore(divCheck, iframe);\n\n            var rect = iframe.getBoundingClientRect();\n            var iframeTop = rect.top + iframe.parentNode.scrollTop;\n            var heightElement = divCheck.offsetHeight;\n            var widthElement = divCheck.offsetWidth;\n            var posTop = parseFloat(iframeTop) - parseFloat(heightElement) - 4;\n            var posLeft = parseFloat(settings.width) - parseFloat(widthElement);\n\n            divCheck.style.cssText = 'position: relative; top: -10px; left: ' + posLeft + 'px; opacity: 1;';\n\n            window.scrollTo(0, posTop -50);\n            setTimeout(function(){\n                if(divCheck.parentNode !== null) {\n                    divCheck.parentNode.removeChild(divCheck);\n                }\n            }, 2000);\n\n        }\n    };\n\n    var init_dentifrice = function(options) {\n        // initialize settings\n        logger._info('Initializing settings');\n        _initSettings(options);\n\n        // Initialize language\n        logger._info('Initializing locale');\n        _initLang();\n\n        // Get the target element\n        logger._info('Getting target element');\n        target = _findTarget();\n\n        // Listen to messages from the iframe\n        logger._info('Setting up postMessages listener');\n        dentifrice_postMessage.setupMessageListener();\n    };\n\n    return {\n        checkIfValidated : function() {\n            if(target.value === \"\") {\n                _showValidationAlert();\n                return false;\n            } else {\n                return true;\n            }\n        },\n        getSettings : function() {\n            return settings;\n        },\n        init_dentifrice : init_dentifrice,\n        bootstrap : function(options) {\n            // initialize\n            init_dentifrice(options);\n\n            // First check if template url was provided\n            // else, give up straight away\n            if ( !settings.templateUrl ) {\n                logger._warn('No template URL provided');\n                // Return false so we can test on the calling page\n                return false;\n            }\n\n            if (target) {\n\n                // Load the editor\n                logger._info('Initializing editor');\n                _initEditor.init();\n\n                return true;\n\n            } else {\n\n                logger._warn('Target element not found, aborting');\n                // Return false so we can test on the calling page\n                return false;\n\n            }\n        }\n    };\n\n})();\n\n/*\n* Logger Module\n*/\n\nvar logger = (function () {\n    var dentifrice_settings = dentifrice.getSettings();\n    /**\n    * Print messages to the console using provided level.\n    */\n    var _output = function (type, msg, enabled) {\n        if (true === enabled && 'object' === typeof window.console) {\n            console[type]('Dentifrice: ' + msg);\n        }\n    };\n    return {\n        /**\n        * Log warning messages to console.\n        * Always logged regardless of the 'log' setting.\n        */\n        _warn : function (msg) {\n            _output('warn', msg, true);\n        },\n\n        /**\n        * Log information messages to console.\n        * Only displayed if 'log' setting is true.\n        */\n        _info : function (msg) {\n            _output('info', msg, dentifrice_settings.log);\n        },\n\n        /**\n        * Log debug messages to console.\n        * Only displayed if 'debug' setting is true.\n        */\n        _debug : function (msg) {\n            _output('log', msg, dentifrice_settings.debug);\n        }\n    };\n\n})();\n\n\n/*\n* PostMessage Listener\n*/\n\nvar dentifrice_postMessage = (function() {\n\n    /**\n    * Attach postMessage listener\n    */\n    var setupMessageListener = function () {\n        var eventMethod = window.addEventListener ? \"addEventListener\" : \"attachEvent\";\n        var eventer = window[eventMethod];\n        var messageEvent = eventMethod == \"attachEvent\" ? \"onmessage\" : \"message\";\n        eventer(messageEvent, messageListener, false);\n    };\n\n    /*\n    * Type post Message response, extend it if you want\n    */\n    var type = {\n        \"final_html\": function(data) {\n            return data.content;\n        }\n    };\n    /*\n    * Callback listener for postMessages\n    */\n    var messageListener = function (event) {\n\n        function isMessageForUs () {\n            return msgPrefix === (('' + msg).substr(0,msgPrefixLen));\n        }\n\n        var msg = event.data;\n        if(msg.length > msgPrefixLen && typeof msg === 'string' && isMessageForUs()) {\n            logger._debug('Received postmessage :' + msg);\n            /*\n            * Message Json\n            */\n            var messageJson = JSON.parse(msg.substr(msgPrefixLen));\n            /*\n            * Check if type is defined\n            */\n            if(type.hasOwnProperty(messageJson.type)) {\n                target.value = type[messageJson.type](messageJson);\n            }else {\n                logger._warn('Type undefined');\n            }\n\n        }else {\n            logger._debug('Received postmessage, but not for us :' + msg);\n        }\n\n    };\n\n    return {\n        setupMessageListener : setupMessageListener,\n        type                 : type\n    };\n\n})();\n\n\n/**\n* Initialize the editor\n*/\n\nvar _initEditor = (function () {\n    var init = function() {\n        dentifrice_settings = dentifrice.getSettings();\n        // Hide the target and prepare iframe\n        if (dentifrice_settings.hideTarget) {\n            target.style.display = 'none';\n        }\n\n        var assetsUrlBase = dentifrice_settings.templateUrl.replace(/\\/[^\\/]*$/, '/');\n        var absTest = /^https?:\\/\\/|^\\/\\//i;\n\n        // Prepare template URL\n        var templateUrlEncoded = encodeURIComponent(dentifrice_settings.templateUrl);\n\n        // Prepare CSS URL\n        var stylesUrlEncoded = encodeURIComponent(assetsUrlBase + dentifrice_settings.stylesUrl);\n        // If an absolute stylesUrl was provided, use it instead\n        if ( absTest.test(dentifrice_settings.stylesUrl) ) {\n            stylesUrlEncoded = encodeURIComponent(dentifrice_settings.stylesUrl);\n        }\n\n        // Prepare config URL\n        var configUrlEncoded = encodeURIComponent(assetsUrlBase + dentifrice_settings.configUrl);\n        // f an absolute configUrl was provided, use it instead\n        if ( absTest.test(dentifrice_settings.configUrl) ) {\n            configUrlEncoded = encodeURIComponent(dentifrice_settings.configUrl);\n        }\n\n        // Get our own URL to use as base for the iFrame src\n        var bootstrapRoot = '';\n        var allScripts = document.getElementsByTagName('script');\n        var re = /^(.*)dentifrice\\.(min\\.)*js(.*)/;\n        [].forEach.call(allScripts, function (tag) {\n            var src = tag.getAttribute('src');\n            var match = re.exec(src);\n            if (match) {\n                // Found a base url to use\n                bootstrapRoot = match[1];\n            }\n        });\n\n        var editorUrl = bootstrapRoot + 'editor.html?template=' + templateUrlEncoded + '&styles=' + stylesUrlEncoded + '&config=' + configUrlEncoded + '&lang=' + lang + '&title=' + dentifrice_settings.title;\n\n        var iframe = document.createElement('iframe');\n\n        iframe.id = iframeID;\n        iframe.setAttribute('src', editorUrl);\n        iframe.style.border = '0';\n        iframe.style.width = dentifrice_settings.width + 'px';\n        iframe.style.height = dentifrice_settings.height + 'px';\n\n        if (dentifrice_settings.anchorId) {\n            var anchor = document.getElementById(dentifrice_settings.anchorId);\n            if (0 === anchor.length) {\n                logger._warn('Could not find anchor element with ID: ' + dentifrice_settings.anchorId);\n            } else {\n                logger._debug('Found anchor element with ID: ' + dentifrice_settings.anchorId);\n                if (dentifrice_settings.replaceAnchor) {\n                    logger._debug('Replacing anchor element with editor');\n                    anchor.parentNode.replaceChild(iframe, anchor);\n                } else {\n                    logger._debug('Inserting editor inside anchor element');\n                    anchor.appendChild(iframe);\n                }\n            }\n        } else {\n            target.parentNode.insertBefore(iframe, target.nextSibling);\n        }\n    };\n\n    /*\n    * Return init function\n    */\n    return {\n        init: init\n    };\n})();\n"],"sourceRoot":"/source/"}